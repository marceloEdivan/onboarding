{"ast":null,"code":"import _objectSpread from \"/home/marcelo/GIT/onboarding/W02D01/vue/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.string.trim.js\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.array.find-index.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.string.includes.js\";\n// Styles\nimport \"../../../src/components/VAutocomplete/VAutocomplete.sass\"; // Extensions\n\nimport VSelect, { defaultMenuProps as VSelectMenuProps } from '../VSelect/VSelect';\nimport VTextField from '../VTextField/VTextField'; // Utilities\n\nimport mergeData from '../../util/mergeData';\nimport { getObjectValueByPath, getPropertyFromItem, keyCodes } from '../../util/helpers';\n\nvar defaultMenuProps = _objectSpread(_objectSpread({}, VSelectMenuProps), {}, {\n  offsetY: true,\n  offsetOverflow: true,\n  transition: false\n});\n/* @vue/component */\n\n\nexport default VSelect.extend({\n  name: 'v-autocomplete',\n  props: {\n    allowOverflow: {\n      type: Boolean,\n      default: true\n    },\n    autoSelectFirst: {\n      type: Boolean,\n      default: false\n    },\n    filter: {\n      type: Function,\n      default: function _default(item, queryText, itemText) {\n        return itemText.toLocaleLowerCase().indexOf(queryText.toLocaleLowerCase()) > -1;\n      }\n    },\n    hideNoData: Boolean,\n    menuProps: {\n      type: VSelect.options.props.menuProps.type,\n      default: function _default() {\n        return defaultMenuProps;\n      }\n    },\n    noFilter: Boolean,\n    searchInput: {\n      type: String\n    }\n  },\n  data: function data() {\n    return {\n      lazySearch: this.searchInput\n    };\n  },\n  computed: {\n    classes: function classes() {\n      return _objectSpread(_objectSpread({}, VSelect.options.computed.classes.call(this)), {}, {\n        'v-autocomplete': true,\n        'v-autocomplete--is-selecting-index': this.selectedIndex > -1\n      });\n    },\n    computedItems: function computedItems() {\n      return this.filteredItems;\n    },\n    selectedValues: function selectedValues() {\n      var _this = this;\n\n      return this.selectedItems.map(function (item) {\n        return _this.getValue(item);\n      });\n    },\n    hasDisplayedItems: function hasDisplayedItems() {\n      var _this2 = this;\n\n      return this.hideSelected ? this.filteredItems.some(function (item) {\n        return !_this2.hasItem(item);\n      }) : this.filteredItems.length > 0;\n    },\n    currentRange: function currentRange() {\n      if (this.selectedItem == null) return 0;\n      return String(this.getText(this.selectedItem)).length;\n    },\n    filteredItems: function filteredItems() {\n      var _this3 = this;\n\n      if (!this.isSearching || this.noFilter || this.internalSearch == null) return this.allItems;\n      return this.allItems.filter(function (item) {\n        var value = getPropertyFromItem(item, _this3.itemText);\n        var text = value != null ? String(value) : '';\n        return _this3.filter(item, String(_this3.internalSearch), text);\n      });\n    },\n    internalSearch: {\n      get: function get() {\n        return this.lazySearch;\n      },\n      set: function set(val) {\n        // emit update event only when the new\n        // search value is different from previous\n        if (this.lazySearch !== val) {\n          this.lazySearch = val;\n          this.$emit('update:search-input', val);\n        }\n      }\n    },\n    isAnyValueAllowed: function isAnyValueAllowed() {\n      return false;\n    },\n    isDirty: function isDirty() {\n      return this.searchIsDirty || this.selectedItems.length > 0;\n    },\n    isSearching: function isSearching() {\n      return this.multiple && this.searchIsDirty || this.searchIsDirty && this.internalSearch !== this.getText(this.selectedItem);\n    },\n    menuCanShow: function menuCanShow() {\n      if (!this.isFocused) return false;\n      return this.hasDisplayedItems || !this.hideNoData;\n    },\n    $_menuProps: function $_menuProps() {\n      var props = VSelect.options.computed.$_menuProps.call(this);\n      props.contentClass = \"v-autocomplete__content \".concat(props.contentClass || '').trim();\n      return _objectSpread(_objectSpread({}, defaultMenuProps), props);\n    },\n    searchIsDirty: function searchIsDirty() {\n      return this.internalSearch != null && this.internalSearch !== '';\n    },\n    selectedItem: function selectedItem() {\n      var _this4 = this;\n\n      if (this.multiple) return null;\n      return this.selectedItems.find(function (i) {\n        return _this4.valueComparator(_this4.getValue(i), _this4.getValue(_this4.internalValue));\n      });\n    },\n    listData: function listData() {\n      var data = VSelect.options.computed.listData.call(this);\n      data.props = _objectSpread(_objectSpread({}, data.props), {}, {\n        items: this.virtualizedItems,\n        noFilter: this.noFilter || !this.isSearching || !this.filteredItems.length,\n        searchInput: this.internalSearch\n      });\n      return data;\n    }\n  },\n  watch: {\n    filteredItems: 'onFilteredItemsChanged',\n    internalValue: 'setSearch',\n    isFocused: function isFocused(val) {\n      if (val) {\n        document.addEventListener('copy', this.onCopy);\n        this.$refs.input && this.$refs.input.select();\n      } else {\n        document.removeEventListener('copy', this.onCopy);\n        this.blur();\n        this.updateSelf();\n      }\n    },\n    isMenuActive: function isMenuActive(val) {\n      if (val || !this.hasSlot) return;\n      this.lazySearch = null;\n    },\n    items: function items(val, oldVal) {\n      // If we are focused, the menu\n      // is not active, hide no data is enabled,\n      // and items change\n      // User is probably async loading\n      // items, try to activate the menu\n      if (!(oldVal && oldVal.length) && this.hideNoData && this.isFocused && !this.isMenuActive && val.length) this.activateMenu();\n    },\n    searchInput: function searchInput(val) {\n      this.lazySearch = val;\n    },\n    internalSearch: 'onInternalSearchChanged',\n    itemText: 'updateSelf'\n  },\n  created: function created() {\n    this.setSearch();\n  },\n  destroyed: function destroyed() {\n    document.removeEventListener('copy', this.onCopy);\n  },\n  methods: {\n    onFilteredItemsChanged: function onFilteredItemsChanged(val, oldVal) {\n      var _this5 = this;\n\n      // TODO: How is the watcher triggered\n      // for duplicate items? no idea\n      if (val === oldVal) return;\n\n      if (!this.autoSelectFirst) {\n        var preSelectedItem = oldVal[this.$refs.menu.listIndex];\n\n        if (preSelectedItem) {\n          this.setMenuIndex(val.findIndex(function (i) {\n            return i === preSelectedItem;\n          }));\n        } else {\n          this.setMenuIndex(-1);\n        }\n\n        this.$emit('update:list-index', this.$refs.menu.listIndex);\n      }\n\n      this.$nextTick(function () {\n        if (!_this5.internalSearch || val.length !== 1 && !_this5.autoSelectFirst) return;\n\n        _this5.$refs.menu.getTiles();\n\n        if (_this5.autoSelectFirst && val.length) {\n          _this5.setMenuIndex(0);\n\n          _this5.$emit('update:list-index', _this5.$refs.menu.listIndex);\n        }\n      });\n    },\n    onInternalSearchChanged: function onInternalSearchChanged() {\n      this.updateMenuDimensions();\n    },\n    updateMenuDimensions: function updateMenuDimensions() {\n      // Type from menuable is not making it through\n      this.isMenuActive && this.$refs.menu && this.$refs.menu.updateDimensions();\n    },\n    changeSelectedIndex: function changeSelectedIndex(keyCode) {\n      // Do not allow changing of selectedIndex\n      // when search is dirty\n      if (this.searchIsDirty) return;\n\n      if (this.multiple && keyCode === keyCodes.left) {\n        if (this.selectedIndex === -1) {\n          this.selectedIndex = this.selectedItems.length - 1;\n        } else {\n          this.selectedIndex--;\n        }\n      } else if (this.multiple && keyCode === keyCodes.right) {\n        if (this.selectedIndex >= this.selectedItems.length - 1) {\n          this.selectedIndex = -1;\n        } else {\n          this.selectedIndex++;\n        }\n      } else if (keyCode === keyCodes.backspace || keyCode === keyCodes.delete) {\n        this.deleteCurrentItem();\n      }\n    },\n    deleteCurrentItem: function deleteCurrentItem() {\n      var curIndex = this.selectedIndex;\n      var curItem = this.selectedItems[curIndex]; // Do nothing if input or item is disabled\n\n      if (!this.isInteractive || this.getDisabled(curItem)) return;\n      var lastIndex = this.selectedItems.length - 1; // Select the last item if\n      // there is no selection\n\n      if (this.selectedIndex === -1 && lastIndex !== 0) {\n        this.selectedIndex = lastIndex;\n        return;\n      }\n\n      var length = this.selectedItems.length;\n      var nextIndex = curIndex !== length - 1 ? curIndex : curIndex - 1;\n      var nextItem = this.selectedItems[nextIndex];\n\n      if (!nextItem) {\n        this.setValue(this.multiple ? [] : null);\n      } else {\n        this.selectItem(curItem);\n      }\n\n      this.selectedIndex = nextIndex;\n    },\n    clearableCallback: function clearableCallback() {\n      this.internalSearch = null;\n      VSelect.options.methods.clearableCallback.call(this);\n    },\n    genInput: function genInput() {\n      var input = VTextField.options.methods.genInput.call(this);\n      input.data = mergeData(input.data, {\n        attrs: {\n          'aria-activedescendant': getObjectValueByPath(this.$refs.menu, 'activeTile.id'),\n          autocomplete: getObjectValueByPath(input.data, 'attrs.autocomplete', 'off')\n        },\n        domProps: {\n          value: this.internalSearch\n        }\n      });\n      return input;\n    },\n    genInputSlot: function genInputSlot() {\n      var slot = VSelect.options.methods.genInputSlot.call(this);\n      slot.data.attrs.role = 'combobox';\n      return slot;\n    },\n    genSelections: function genSelections() {\n      return this.hasSlot || this.multiple ? VSelect.options.methods.genSelections.call(this) : [];\n    },\n    onClick: function onClick(e) {\n      if (!this.isInteractive) return;\n      this.selectedIndex > -1 ? this.selectedIndex = -1 : this.onFocus();\n      if (!this.isAppendInner(e.target)) this.activateMenu();\n    },\n    onInput: function onInput(e) {\n      if (this.selectedIndex > -1 || !e.target) return;\n      var target = e.target;\n      var value = target.value; // If typing and menu is not currently active\n\n      if (target.value) this.activateMenu();\n      if (!this.multiple && value === '') this.deleteCurrentItem();\n      this.internalSearch = value;\n      this.badInput = target.validity && target.validity.badInput;\n    },\n    onKeyDown: function onKeyDown(e) {\n      var keyCode = e.keyCode;\n\n      if (e.ctrlKey || ![keyCodes.home, keyCodes.end].includes(keyCode)) {\n        VSelect.options.methods.onKeyDown.call(this, e);\n      } // The ordering is important here\n      // allows new value to be updated\n      // and then moves the index to the\n      // proper location\n\n\n      this.changeSelectedIndex(keyCode);\n    },\n    onSpaceDown: function onSpaceDown(e) {},\n    onTabDown: function onTabDown(e) {\n      VSelect.options.methods.onTabDown.call(this, e);\n      this.updateSelf();\n    },\n    onUpDown: function onUpDown(e) {\n      // Prevent screen from scrolling\n      e.preventDefault(); // For autocomplete / combobox, cycling\n      // interfers with native up/down behavior\n      // instead activate the menu\n\n      this.activateMenu();\n    },\n    selectItem: function selectItem(item) {\n      VSelect.options.methods.selectItem.call(this, item);\n      this.setSearch();\n    },\n    setSelectedItems: function setSelectedItems() {\n      VSelect.options.methods.setSelectedItems.call(this); // #4273 Don't replace if searching\n      // #4403 Don't replace if focused\n\n      if (!this.isFocused) this.setSearch();\n    },\n    setSearch: function setSearch() {\n      var _this6 = this;\n\n      // Wait for nextTick so selectedItem\n      // has had time to update\n      this.$nextTick(function () {\n        if (!_this6.multiple || !_this6.internalSearch || !_this6.isMenuActive) {\n          _this6.internalSearch = !_this6.selectedItems.length || _this6.multiple || _this6.hasSlot ? null : _this6.getText(_this6.selectedItem);\n        }\n      });\n    },\n    updateSelf: function updateSelf() {\n      if (!this.searchIsDirty && !this.internalValue) return;\n\n      if (!this.multiple && !this.valueComparator(this.internalSearch, this.getValue(this.internalValue))) {\n        this.setSearch();\n      }\n    },\n    hasItem: function hasItem(item) {\n      return this.selectedValues.indexOf(this.getValue(item)) > -1;\n    },\n    onCopy: function onCopy(event) {\n      var _event$clipboardData, _event$clipboardData2;\n\n      if (this.selectedIndex === -1) return;\n      var currentItem = this.selectedItems[this.selectedIndex];\n      var currentItemText = this.getText(currentItem);\n      (_event$clipboardData = event.clipboardData) == null ? void 0 : _event$clipboardData.setData('text/plain', currentItemText);\n      (_event$clipboardData2 = event.clipboardData) == null ? void 0 : _event$clipboardData2.setData('text/vnd.vuetify.autocomplete.item+plain', currentItemText);\n      event.preventDefault();\n    }\n  }\n});","map":{"version":3,"mappings":"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","names":["VSelect","defaultMenuProps","VSelectMenuProps","VTextField","mergeData","getObjectValueByPath","getPropertyFromItem","keyCodes","offsetY","offsetOverflow","transition","extend","name","props","allowOverflow","type","Boolean","default","autoSelectFirst","filter","Function","item","queryText","itemText","toLocaleLowerCase","indexOf","hideNoData","menuProps","options","noFilter","searchInput","String","data","lazySearch","computed","classes","call","selectedIndex","computedItems","filteredItems","selectedValues","selectedItems","map","getValue","hasDisplayedItems","hideSelected","some","hasItem","length","currentRange","selectedItem","getText","isSearching","internalSearch","allItems","value","text","get","set","val","$emit","isAnyValueAllowed","isDirty","searchIsDirty","multiple","menuCanShow","isFocused","$_menuProps","contentClass","trim","find","valueComparator","i","internalValue","listData","items","virtualizedItems","watch","document","addEventListener","onCopy","$refs","input","select","removeEventListener","blur","updateSelf","isMenuActive","hasSlot","oldVal","activateMenu","created","setSearch","destroyed","methods","onFilteredItemsChanged","preSelectedItem","menu","listIndex","setMenuIndex","findIndex","$nextTick","getTiles","onInternalSearchChanged","updateMenuDimensions","updateDimensions","changeSelectedIndex","keyCode","left","right","backspace","delete","deleteCurrentItem","curIndex","curItem","isInteractive","getDisabled","lastIndex","nextIndex","nextItem","setValue","selectItem","clearableCallback","genInput","attrs","autocomplete","domProps","genInputSlot","slot","role","genSelections","onClick","e","onFocus","isAppendInner","target","onInput","badInput","validity","onKeyDown","ctrlKey","home","end","includes","onSpaceDown","onTabDown","onUpDown","preventDefault","setSelectedItems","event","currentItem","currentItemText","clipboardData","setData"],"sourceRoot":"","sources":["../../../src/components/VAutocomplete/VAutocomplete.ts"],"sourcesContent":["// Styles\nimport './VAutocomplete.sass'\n\n// Extensions\nimport VSelect, { defaultMenuProps as VSelectMenuProps } from '../VSelect/VSelect'\nimport VTextField from '../VTextField/VTextField'\n\n// Utilities\nimport mergeData from '../../util/mergeData'\nimport {\n  getObjectValueByPath,\n  getPropertyFromItem,\n  keyCodes,\n} from '../../util/helpers'\n\n// Types\nimport { PropType, VNode } from 'vue'\nimport { PropValidator } from 'vue/types/options'\n\nconst defaultMenuProps = {\n  ...VSelectMenuProps,\n  offsetY: true,\n  offsetOverflow: true,\n  transition: false,\n}\n\n/* @vue/component */\nexport default VSelect.extend({\n  name: 'v-autocomplete',\n\n  props: {\n    allowOverflow: {\n      type: Boolean,\n      default: true,\n    },\n    autoSelectFirst: {\n      type: Boolean,\n      default: false,\n    },\n    filter: {\n      type: Function,\n      default: (item: any, queryText: string, itemText: string) => {\n        return itemText.toLocaleLowerCase().indexOf(queryText.toLocaleLowerCase()) > -1\n      },\n    } as PropValidator<(item: any, queryText: string, itemText: string) => boolean>,\n    hideNoData: Boolean,\n    menuProps: {\n      type: VSelect.options.props.menuProps.type,\n      default: () => defaultMenuProps,\n    },\n    noFilter: Boolean,\n    searchInput: {\n      type: String as PropType<string | null>,\n    },\n  },\n\n  data () {\n    return {\n      lazySearch: this.searchInput,\n    }\n  },\n\n  computed: {\n    classes (): object {\n      return {\n        ...VSelect.options.computed.classes.call(this),\n        'v-autocomplete': true,\n        'v-autocomplete--is-selecting-index': this.selectedIndex > -1,\n      }\n    },\n    computedItems (): object[] {\n      return this.filteredItems\n    },\n    selectedValues (): object[] {\n      return this.selectedItems.map(item => this.getValue(item))\n    },\n    hasDisplayedItems (): boolean {\n      return this.hideSelected\n        ? this.filteredItems.some(item => !this.hasItem(item))\n        : this.filteredItems.length > 0\n    },\n    currentRange (): number {\n      if (this.selectedItem == null) return 0\n\n      return String(this.getText(this.selectedItem)).length\n    },\n    filteredItems (): object[] {\n      if (!this.isSearching || this.noFilter || this.internalSearch == null) return this.allItems\n\n      return this.allItems.filter(item => {\n        const value = getPropertyFromItem(item, this.itemText)\n        const text = value != null ? String(value) : ''\n\n        return this.filter(item, String(this.internalSearch), text)\n      })\n    },\n    internalSearch: {\n      get (): string | null {\n        return this.lazySearch\n      },\n      set (val: any) { // TODO: this should be `string | null` but it breaks lots of other types\n        // emit update event only when the new\n        // search value is different from previous\n        if (this.lazySearch !== val) {\n          this.lazySearch = val\n          this.$emit('update:search-input', val)\n        }\n      },\n    },\n    isAnyValueAllowed (): boolean {\n      return false\n    },\n    isDirty (): boolean {\n      return this.searchIsDirty || this.selectedItems.length > 0\n    },\n    isSearching (): boolean {\n      return (\n        this.multiple &&\n        this.searchIsDirty\n      ) || (\n        this.searchIsDirty &&\n        this.internalSearch !== this.getText(this.selectedItem)\n      )\n    },\n    menuCanShow (): boolean {\n      if (!this.isFocused) return false\n\n      return this.hasDisplayedItems || !this.hideNoData\n    },\n    $_menuProps (): object {\n      const props = VSelect.options.computed.$_menuProps.call(this);\n      (props as any).contentClass = `v-autocomplete__content ${(props as any).contentClass || ''}`.trim()\n      return {\n        ...defaultMenuProps,\n        ...props,\n      }\n    },\n    searchIsDirty (): boolean {\n      return this.internalSearch != null &&\n        this.internalSearch !== ''\n    },\n    selectedItem (): any {\n      if (this.multiple) return null\n\n      return this.selectedItems.find(i => {\n        return this.valueComparator(this.getValue(i), this.getValue(this.internalValue))\n      })\n    },\n    listData () {\n      const data = VSelect.options.computed.listData.call(this) as any\n\n      data.props = {\n        ...data.props,\n        items: this.virtualizedItems,\n        noFilter: (\n          this.noFilter ||\n          !this.isSearching ||\n          !this.filteredItems.length\n        ),\n        searchInput: this.internalSearch,\n      }\n\n      return data\n    },\n  },\n\n  watch: {\n    filteredItems: 'onFilteredItemsChanged',\n    internalValue: 'setSearch',\n    isFocused (val) {\n      if (val) {\n        document.addEventListener('copy', this.onCopy)\n        this.$refs.input && this.$refs.input.select()\n      } else {\n        document.removeEventListener('copy', this.onCopy)\n        this.blur()\n        this.updateSelf()\n      }\n    },\n    isMenuActive (val) {\n      if (val || !this.hasSlot) return\n\n      this.lazySearch = null\n    },\n    items (val, oldVal) {\n      // If we are focused, the menu\n      // is not active, hide no data is enabled,\n      // and items change\n      // User is probably async loading\n      // items, try to activate the menu\n      if (\n        !(oldVal && oldVal.length) &&\n        this.hideNoData &&\n        this.isFocused &&\n        !this.isMenuActive &&\n        val.length\n      ) this.activateMenu()\n    },\n    searchInput (val: string) {\n      this.lazySearch = val\n    },\n    internalSearch: 'onInternalSearchChanged',\n    itemText: 'updateSelf',\n  },\n\n  created () {\n    this.setSearch()\n  },\n\n  destroyed () {\n    document.removeEventListener('copy', this.onCopy)\n  },\n\n  methods: {\n    onFilteredItemsChanged (val: never[], oldVal: never[]) {\n      // TODO: How is the watcher triggered\n      // for duplicate items? no idea\n      if (val === oldVal) return\n\n      if (!this.autoSelectFirst) {\n        const preSelectedItem = oldVal[this.$refs.menu.listIndex]\n\n        if (preSelectedItem) {\n          this.setMenuIndex(val.findIndex(i => i === preSelectedItem))\n        } else {\n          this.setMenuIndex(-1)\n        }\n        this.$emit('update:list-index', this.$refs.menu.listIndex)\n      }\n\n      this.$nextTick(() => {\n        if (\n          !this.internalSearch ||\n          (val.length !== 1 &&\n            !this.autoSelectFirst)\n        ) return\n\n        this.$refs.menu.getTiles()\n\n        if (this.autoSelectFirst && val.length) {\n          this.setMenuIndex(0)\n          this.$emit('update:list-index', this.$refs.menu.listIndex)\n        }\n      })\n    },\n    onInternalSearchChanged () {\n      this.updateMenuDimensions()\n    },\n    updateMenuDimensions () {\n      // Type from menuable is not making it through\n      this.isMenuActive && this.$refs.menu && this.$refs.menu.updateDimensions()\n    },\n    changeSelectedIndex (keyCode: number) {\n      // Do not allow changing of selectedIndex\n      // when search is dirty\n      if (this.searchIsDirty) return\n\n      if (this.multiple && keyCode === keyCodes.left) {\n        if (this.selectedIndex === -1) {\n          this.selectedIndex = this.selectedItems.length - 1\n        } else {\n          this.selectedIndex--\n        }\n      } else if (this.multiple && keyCode === keyCodes.right) {\n        if (this.selectedIndex >= this.selectedItems.length - 1) {\n          this.selectedIndex = -1\n        } else {\n          this.selectedIndex++\n        }\n      } else if (keyCode === keyCodes.backspace || keyCode === keyCodes.delete) {\n        this.deleteCurrentItem()\n      }\n    },\n    deleteCurrentItem () {\n      const curIndex = this.selectedIndex\n      const curItem = this.selectedItems[curIndex]\n\n      // Do nothing if input or item is disabled\n      if (\n        !this.isInteractive ||\n        this.getDisabled(curItem)\n      ) return\n\n      const lastIndex = this.selectedItems.length - 1\n\n      // Select the last item if\n      // there is no selection\n      if (\n        this.selectedIndex === -1 &&\n        lastIndex !== 0\n      ) {\n        this.selectedIndex = lastIndex\n\n        return\n      }\n\n      const length = this.selectedItems.length\n      const nextIndex = curIndex !== length - 1\n        ? curIndex\n        : curIndex - 1\n      const nextItem = this.selectedItems[nextIndex]\n\n      if (!nextItem) {\n        this.setValue(this.multiple ? [] : null)\n      } else {\n        this.selectItem(curItem)\n      }\n\n      this.selectedIndex = nextIndex\n    },\n    clearableCallback () {\n      this.internalSearch = null\n\n      VSelect.options.methods.clearableCallback.call(this)\n    },\n    genInput () {\n      const input = VTextField.options.methods.genInput.call(this)\n\n      input.data = mergeData(input.data!, {\n        attrs: {\n          'aria-activedescendant': getObjectValueByPath(this.$refs.menu, 'activeTile.id'),\n          autocomplete: getObjectValueByPath(input.data!, 'attrs.autocomplete', 'off'),\n        },\n        domProps: { value: this.internalSearch },\n      })\n\n      return input\n    },\n    genInputSlot () {\n      const slot = VSelect.options.methods.genInputSlot.call(this)\n\n      slot.data!.attrs!.role = 'combobox'\n\n      return slot\n    },\n    genSelections (): VNode | never[] {\n      return this.hasSlot || this.multiple\n        ? VSelect.options.methods.genSelections.call(this)\n        : []\n    },\n    onClick (e: MouseEvent) {\n      if (!this.isInteractive) return\n\n      this.selectedIndex > -1\n        ? (this.selectedIndex = -1)\n        : this.onFocus()\n\n      if (!this.isAppendInner(e.target)) this.activateMenu()\n    },\n    onInput (e: Event) {\n      if (\n        this.selectedIndex > -1 ||\n        !e.target\n      ) return\n\n      const target = e.target as HTMLInputElement\n      const value = target.value\n\n      // If typing and menu is not currently active\n      if (target.value) this.activateMenu()\n\n      if (!this.multiple && value === '') this.deleteCurrentItem()\n\n      this.internalSearch = value\n      this.badInput = target.validity && target.validity.badInput\n    },\n    onKeyDown (e: KeyboardEvent) {\n      const keyCode = e.keyCode\n\n      if (\n        e.ctrlKey ||\n        ![keyCodes.home, keyCodes.end].includes(keyCode)\n      ) {\n        VSelect.options.methods.onKeyDown.call(this, e)\n      }\n\n      // The ordering is important here\n      // allows new value to be updated\n      // and then moves the index to the\n      // proper location\n      this.changeSelectedIndex(keyCode)\n    },\n    onSpaceDown (e: KeyboardEvent) { /* noop */ },\n    onTabDown (e: KeyboardEvent) {\n      VSelect.options.methods.onTabDown.call(this, e)\n      this.updateSelf()\n    },\n    onUpDown (e: Event) {\n      // Prevent screen from scrolling\n      e.preventDefault()\n\n      // For autocomplete / combobox, cycling\n      // interfers with native up/down behavior\n      // instead activate the menu\n      this.activateMenu()\n    },\n    selectItem (item: object) {\n      VSelect.options.methods.selectItem.call(this, item)\n      this.setSearch()\n    },\n    setSelectedItems () {\n      VSelect.options.methods.setSelectedItems.call(this)\n\n      // #4273 Don't replace if searching\n      // #4403 Don't replace if focused\n      if (!this.isFocused) this.setSearch()\n    },\n    setSearch () {\n      // Wait for nextTick so selectedItem\n      // has had time to update\n      this.$nextTick(() => {\n        if (\n          !this.multiple ||\n          !this.internalSearch ||\n          !this.isMenuActive\n        ) {\n          this.internalSearch = (\n            !this.selectedItems.length ||\n            this.multiple ||\n            this.hasSlot\n          )\n            ? null\n            : this.getText(this.selectedItem)\n        }\n      })\n    },\n    updateSelf () {\n      if (\n        !this.searchIsDirty &&\n        !this.internalValue\n      ) return\n\n      if (\n        !this.multiple &&\n        !this.valueComparator(\n          this.internalSearch,\n          this.getValue(this.internalValue)\n        )\n      ) {\n        this.setSearch()\n      }\n    },\n    hasItem (item: any): boolean {\n      return this.selectedValues.indexOf(this.getValue(item)) > -1\n    },\n    onCopy (event: ClipboardEvent) {\n      if (this.selectedIndex === -1) return\n\n      const currentItem = this.selectedItems[this.selectedIndex]\n      const currentItemText = this.getText(currentItem)\n      event.clipboardData?.setData('text/plain', currentItemText)\n      event.clipboardData?.setData('text/vnd.vuetify.autocomplete.item+plain', currentItemText)\n      event.preventDefault()\n    },\n  },\n})\n"]},"metadata":{},"sourceType":"module"}